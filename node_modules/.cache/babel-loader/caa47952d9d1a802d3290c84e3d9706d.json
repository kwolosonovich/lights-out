{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nconst nrows = newArray(3);\nconst ncols = newArray(3);\n\nfunction Board({\n  nrows,\n  ncols,\n  chanceLightStartsOn\n}) {\n  _s();\n\n  const [board, setBoard] = useState(createBoard());\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  // random function  \n\n  let getRandom = Math.floor(Math.random() * Math.floor(max));\n\n  function createBoard() {\n    let initialBoard = []; // TODO: create array-of-arrays of true/false values\n\n    for (let i = 0; i < ncols.length; i++) {\n      for (let j = 0; j < nrows.length; j++) {\n        let rowVal = [];\n        let trueFalse = getRandom;\n\n        if (trueFalse) {\n          rowVal.push(true);\n        }\n      }\n\n      const rowItems = [];\n      arrVals.push(row);\n    }\n\n    return initialBoard;\n  } // function hasWon() {\n  //   // TODO: check the board in state to determine whether the player has won.\n  // }\n  // function flipCellsAround(coord) {\n  //   setBoard(oldBoard => {\n  //     const [y, x] = coord.split(\"-\").map(Number);\n  //     const flipCell = (y, x, boardCopy) => {\n  //       // if this coord is actually on board, flip it\n  //       if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n  //         boardCopy[y][x] = !boardCopy[y][x];\n  //       }\n  //     };\n  //     // TODO: Make a (deep) copy of the oldBoard\n  //     // TODO: in the copy, flip this cell and the cells around it\n  //     // TODO: return the copy\n  //   });\n  // }\n  // // if the game is won, just show a winning msg & render nothing else\n  // // TODO\n  // // make table board\n  // // TODO\n\n}\n\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/home/kelly/Springboard/exercises/react-lights-out/src/Board.js"],"names":["React","useState","Cell","nrows","newArray","ncols","Board","chanceLightStartsOn","board","setBoard","createBoard","getRandom","Math","floor","random","max","initialBoard","i","length","j","rowVal","trueFalse","push","rowItems","arrVals","row"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEC,MAAMC,KAAK,GAAGC,QAAQ,CAAC,CAAD,CAAtB;AACA,MAAMC,KAAK,GAAGD,QAAQ,CAAC,CAAD,CAAtB;;AAGD,SAASE,KAAT,CAAe;AAAEH,EAAAA,KAAF;AAASE,EAAAA,KAAT;AAAgBE,EAAAA;AAAhB,CAAf,EAAsD;AAAA;;AACpD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAACS,WAAW,EAAZ,CAAlC;AAEA;AAEA;;AAEA,MAAIC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBF,IAAI,CAACC,KAAL,CAAWE,GAAX,CAA3B,CAAhB;;AAEA,WAASL,WAAT,GAAuB;AACrB,QAAIM,YAAY,GAAG,EAAnB,CADqB,CAGrB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,KAAK,CAACa,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,KAAK,CAACe,MAA1B,EAAkCC,CAAC,EAAnC,EAAuC;AACrC,YAAIC,MAAM,GAAG,EAAb;AACA,YAAIC,SAAS,GAAGV,SAAhB;;AACA,YAAIU,SAAJ,EAAe;AACbD,UAAAA,MAAM,CAACE,IAAP,CAAY,IAAZ;AACD;AACF;;AACD,YAAMC,QAAQ,GAAG,EAAjB;AAGAC,MAAAA,OAAO,CAACF,IAAR,CAAaG,GAAb;AACD;;AAGD,WAAOT,YAAP;AACD,GA9BmD,CAgCpD;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;;AACD;;GA/DQV,K;;KAAAA,K;AAiET,eAAeA,KAAf","sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\n const nrows = newArray(3);\n const ncols = newArray(3);\n\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  // random function  \n\n  let getRandom = Math.floor(Math.random() * Math.floor(max))\n\n  function createBoard() {\n    let initialBoard = [];\n\n    // TODO: create array-of-arrays of true/false values\n\n    for (let i = 0; i < ncols.length; i++) {\n      for (let j = 0; j < nrows.length; j++) {\n        let rowVal = []\n        let trueFalse = getRandom\n        if (trueFalse) {\n          rowVal.push(true)\n        }\n      }\n      const rowItems = [];\n\n\n      arrVals.push(row)\n    }\n\n\n    return initialBoard;\n  }\n\n  // function hasWon() {\n  //   // TODO: check the board in state to determine whether the player has won.\n  // }\n\n  // function flipCellsAround(coord) {\n  //   setBoard(oldBoard => {\n  //     const [y, x] = coord.split(\"-\").map(Number);\n\n  //     const flipCell = (y, x, boardCopy) => {\n  //       // if this coord is actually on board, flip it\n\n  //       if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n  //         boardCopy[y][x] = !boardCopy[y][x];\n  //       }\n  //     };\n\n  //     // TODO: Make a (deep) copy of the oldBoard\n\n  //     // TODO: in the copy, flip this cell and the cells around it\n\n  //     // TODO: return the copy\n  //   });\n  // }\n\n  // // if the game is won, just show a winning msg & render nothing else\n\n  // // TODO\n\n  // // make table board\n\n  // // TODO\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}