{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/kelly/Springboard/exercises/react-lights-out/src/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\nimport { xor } from \"lodash\";\nimport Random from './Random';\n/** Game board of Lights out.\n\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n// game board properties:\n//  number of rows of board\n\nconst nrows = new Array(3); //  number of cols of board\n\nconst ncols = new Array(3); // chance any cell is lit at start of game\n\nconst chanceLightStartsOn = 0.5;\n\nfunction Board() {\n  _s();\n\n  // const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  const [board, setBoard] = useState(createBoard(nrows, ncols));\n\n  function createBoard(nrows, ncols) {\n    let initialBoard = []; // array-of-arrays of true/false values\n\n    for (let i = 0; i < nrows.length; i++) {\n      let rowVals = [];\n\n      for (let j = 0; j < ncols.length; j++) {\n        ncols[j] = Random();\n\n        if (ncols[j] > 0.5) {\n          rowVals.push(true);\n        } else {\n          rowVals.push(false);\n        }\n      }\n\n      initialBoard.push(rowVals);\n    }\n\n    console.log(initialBoard);\n    return initialBoard;\n  } // function hasWon() {\n  //   // TODO: check the board in state to determine whether the player has won.\n  // }\n\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      }; // TODO: Make a (deep) copy of the oldBoard\n      // TODO: in the copy, flip this cell and the cells around it\n      // TODO: return the copy\n\n    });\n  } // // if the game is won, just show a winning msg & render nothing else\n  // // TODO\n  // TODO create table board\n\n\n  const tableBoard = [];\n\n  for (let x = 0; x < nrows.length; x++) {\n    let tableRow = [];\n\n    for (let y = 0; y < ncols.length; y++) {\n      let cellCoords = `${nrows[x]}-${ncols[y]}`;\n      tableRow.push(cellCoords);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Board\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: tableBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"0KohriEQItlF8TJXiaoqYWDcNJU=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/home/kelly/Springboard/exercises/react-lights-out/src/Board.js"],"names":["React","useState","Cell","xor","Random","nrows","Array","ncols","chanceLightStartsOn","Board","board","setBoard","createBoard","initialBoard","i","length","rowVals","j","push","console","log","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","tableBoard","tableRow","cellCoords"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\nimport { xor } from \"lodash\";\nimport Random from './Random'\n\n/** Game board of Lights out.\n\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n// game board properties:\n\n//  number of rows of board\n const nrows = new Array(3);\n//  number of cols of board\n const ncols = new Array(3);\n// chance any cell is lit at start of game\n  const chanceLightStartsOn = 0.5\n\n\n\nfunction Board() {\n  // const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  const [board, setBoard] = useState(createBoard(nrows, ncols));\n\n  function createBoard(nrows, ncols) {\n    let initialBoard = [];\n\n    // array-of-arrays of true/false values\n    for (let i = 0; i < nrows.length; i++) {\n      let rowVals = [];\n      for (let j = 0; j < ncols.length; j++) {\n        ncols[j] = Random();\n\n        if (ncols[j] > 0.5) {\n          rowVals.push(true);\n        } else {\n          rowVals.push(false);\n        }\n      }\n\n      initialBoard.push(rowVals);\n    }\n    console.log(initialBoard);\n    return initialBoard;\n  }\n  // function hasWon() {\n  //   // TODO: check the board in state to determine whether the player has won.\n  // }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n    });\n  }\n\n  // // if the game is won, just show a winning msg & render nothing else\n\n  // // TODO\n\n  // TODO create table board\n\n  const tableBoard = [] \n\n  for (let x = 0; x < nrows.length; x++) {\n    let tableRow = []\n    for (let y = 0; y < ncols.length; y++) {\n      let cellCoords = `${nrows[x]}-${ncols[y]}`\n      tableRow.push(cellCoords)\n    }\n  \n  }\n\n  return (\n    <div>\n      <h1>Board</h1>\n      <table>{tableBoard}</table>\n    </div>\n  );\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}