{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\nimport { xor } from \"lodash\";\nimport Random from './Random';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nconst nrows = new Array(3);\nconst ncols = new Array(3);\nconst chanceLightStartsOn = 0.5; // function Board({ nrows, ncols, chanceLightStartsOn }) {\n\nfunction Board() {\n  _s();\n\n  // const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  const [board, setBoard] = useState(createBoard(nrows, ncols));\n\n  function createBoard(nrows, ncols) {\n    let initialBoard = []; // TODO: create array-of-arrays of true/false values\n\n    for (let i = 0; i < nrows.length; i++) {\n      for (let j = 0; j < ncols.length; j++) {\n        let rowVal = [];\n        let getRandom = Random();\n\n        if (getRandom > 0.5) {\n          rowVal.push(true);\n        } else {\n          rowVal.push(false);\n        }\n      }\n\n      initialBoard.push(ncols[i]);\n    }\n\n    console.log(initialBoard);\n    setBoard(initialBoard);\n    return initialBoard;\n  } // function hasWon() {\n  //   // TODO: check the board in state to determine whether the player has won.\n  // }\n  // function flipCellsAround(coord) {\n  //   setBoard(oldBoard => {\n  //     const [y, x] = coord.split(\"-\").map(Number);\n  //     const flipCell = (y, x, boardCopy) => {\n  //       // if this coord is actually on board, flip it\n  //       if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n  //         boardCopy[y][x] = !boardCopy[y][x];\n  //       }\n  //     };\n  //     // TODO: Make a (deep) copy of the oldBoard\n  //     // TODO: in the copy, flip this cell and the cells around it\n  //     // TODO: return the copy\n  //   });\n  // }\n  // // if the game is won, just show a winning msg & render nothing else\n  // // TODO\n  // // make table board\n  // // TODO\n\n\n  const makeBoard = () => {\n    setBoard(createBoard);\n  };\n}\n\n_s(Board, \"0KohriEQItlF8TJXiaoqYWDcNJU=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/home/kelly/Springboard/exercises/react-lights-out/src/Board.js"],"names":["React","useState","Cell","xor","Random","nrows","Array","ncols","chanceLightStartsOn","Board","board","setBoard","createBoard","initialBoard","i","length","j","rowVal","getRandom","push","console","log","makeBoard"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEC,MAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAU,CAAV,CAAd;AACA,MAAMC,KAAK,GAAG,IAAID,KAAJ,CAAU,CAAV,CAAd;AACC,MAAME,mBAAmB,GAAG,GAA5B,C,CAEF;;AAEA,SAASC,KAAT,GAAiB;AAAA;;AACf;;AAEA;AAEA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAACW,WAAW,CAACP,KAAD,EAAQE,KAAR,CAAZ,CAAlC;;AAEA,WAASK,WAAT,CAAqBP,KAArB,EAA4BE,KAA5B,EAAmC;AACjC,QAAIM,YAAY,GAAG,EAAnB,CADiC,CAGjC;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,KAAK,CAACU,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,KAAK,CAACQ,MAA1B,EAAkCC,CAAC,EAAnC,EAAuC;AACrC,YAAIC,MAAM,GAAG,EAAb;AAEA,YAAIC,SAAS,GAAGd,MAAM,EAAtB;;AAEA,YAAIc,SAAS,GAAG,GAAhB,EAAqB;AACnBD,UAAAA,MAAM,CAACE,IAAP,CAAY,IAAZ;AACD,SAFD,MAEO;AACLF,UAAAA,MAAM,CAACE,IAAP,CAAY,KAAZ;AACD;AACF;;AACDN,MAAAA,YAAY,CAACM,IAAb,CAAkBZ,KAAK,CAACO,CAAD,CAAvB;AACD;;AACDM,IAAAA,OAAO,CAACC,GAAR,CAAYR,YAAZ;AACAF,IAAAA,QAAQ,CAACE,YAAD,CAAR;AACA,WAAOA,YAAP;AACD,GA7Bc,CA8Bf;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;;;AAEA,QAAMS,SAAS,GAAG,MAAM;AACtBX,IAAAA,QAAQ,CAACC,WAAD,CAAR;AACD,GAFD;AAGD;;GAjEQH,K;;KAAAA,K;AAmET,eAAeA,KAAf","sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\nimport { xor } from \"lodash\";\nimport Random from './Random'\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\n const nrows = new Array(3);\n const ncols = new Array(3);\n  const chanceLightStartsOn = 0.5\n\n// function Board({ nrows, ncols, chanceLightStartsOn }) {\n\nfunction Board() {\n  // const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  const [board, setBoard] = useState(createBoard(nrows, ncols));\n\n  function createBoard(nrows, ncols) {\n    let initialBoard = [];\n\n    // TODO: create array-of-arrays of true/false values\n\n    for (let i = 0; i < nrows.length; i++) {\n      for (let j = 0; j < ncols.length; j++) {\n        let rowVal = [];\n\n        let getRandom = Random();\n\n        if (getRandom > 0.5) {\n          rowVal.push(true);\n        } else {\n          rowVal.push(false);\n        }\n      }\n      initialBoard.push(ncols[i]);\n    }\n    console.log(initialBoard);\n    setBoard(initialBoard);\n    return initialBoard;\n  }\n  // function hasWon() {\n  //   // TODO: check the board in state to determine whether the player has won.\n  // }\n\n  // function flipCellsAround(coord) {\n  //   setBoard(oldBoard => {\n  //     const [y, x] = coord.split(\"-\").map(Number);\n\n  //     const flipCell = (y, x, boardCopy) => {\n  //       // if this coord is actually on board, flip it\n\n  //       if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n  //         boardCopy[y][x] = !boardCopy[y][x];\n  //       }\n  //     };\n\n  //     // TODO: Make a (deep) copy of the oldBoard\n\n  //     // TODO: in the copy, flip this cell and the cells around it\n\n  //     // TODO: return the copy\n  //   });\n  // }\n\n  // // if the game is won, just show a winning msg & render nothing else\n\n  // // TODO\n\n  // // make table board\n\n  // // TODO\n\n  const makeBoard = () => {\n    setBoard(createBoard)\n  }\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}