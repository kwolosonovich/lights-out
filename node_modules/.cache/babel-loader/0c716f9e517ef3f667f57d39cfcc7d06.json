{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/kelly/Springboard/exercises/react-lights-out/src/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\nimport { xor } from \"lodash\";\nimport Random from './Random';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nconst nrows = new Array(3);\nconst ncols = new Array(3);\nconst chanceLightStartsOn = 0.5; // function Board({ nrows, ncols, chanceLightStartsOn }) {\n\nfunction Board(nrows, ncols, chan) {\n  _s();\n\n  // const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  const [board, setBoard] = useState(createBoard());\n\n  function createBoard() {\n    let initialBoard = []; // array-of-arrays of true/false values\n\n    for (let i = 0; i < nrows.length; i++) {\n      let rowVals = [];\n\n      for (let j = 0; j < ncols.length; j++) {\n        ncols[j] = Random();\n\n        if (ncols[j] > 0.5) {\n          rowVals.push(true);\n        } else {\n          rowVals.push(false);\n        }\n      }\n\n      initialBoard.push(rowVals);\n    }\n\n    console.log(initialBoard);\n    return initialBoard;\n  } // function hasWon() {\n  //   // TODO: check the board in state to determine whether the player has won.\n  // }\n\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      }; // TODO: Make a (deep) copy of the oldBoard\n      // TODO: in the copy, flip this cell and the cells around it\n      // TODO: return the copy\n\n    });\n  } // // if the game is won, just show a winning msg & render nothing else\n  // // TODO\n  // TODO create table board\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Board\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/home/kelly/Springboard/exercises/react-lights-out/src/Board.js"],"names":["React","useState","Cell","xor","Random","nrows","Array","ncols","chanceLightStartsOn","Board","chan","board","setBoard","createBoard","initialBoard","i","length","rowVals","j","push","console","log","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEC,MAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAU,CAAV,CAAd;AACA,MAAMC,KAAK,GAAG,IAAID,KAAJ,CAAU,CAAV,CAAd;AACC,MAAME,mBAAmB,GAAG,GAA5B,C,CAEF;;AAEA,SAASC,KAAT,CAAeJ,KAAf,EAAsBE,KAAtB,EAA6BG,IAA7B,EAAmC;AAAA;;AACjC;;AAEA;AAEA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAACY,WAAW,EAAZ,CAAlC;;AAEA,WAASA,WAAT,GAAuB;AACrB,QAAIC,YAAY,GAAG,EAAnB,CADqB,CAGrB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,KAAK,CAACW,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,UAAIE,OAAO,GAAG,EAAd;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,KAAK,CAACS,MAA1B,EAAkCE,CAAC,EAAnC,EAAuC;AACrCX,QAAAA,KAAK,CAACW,CAAD,CAAL,GAAWd,MAAM,EAAjB;;AAEA,YAAIG,KAAK,CAACW,CAAD,CAAL,GAAW,GAAf,EAAoB;AAClBD,UAAAA,OAAO,CAACE,IAAR,CAAa,IAAb;AACD,SAFD,MAEO;AACLF,UAAAA,OAAO,CAACE,IAAR,CAAa,KAAb;AACD;AACF;;AAEDL,MAAAA,YAAY,CAACK,IAAb,CAAkBF,OAAlB;AACD;;AACDG,IAAAA,OAAO,CAACC,GAAR,CAAYP,YAAZ;AACA,WAAOA,YAAP;AACD,GA3BgC,CA4BjC;AACA;AACA;;;AAEA,WAASQ,eAAT,CAAyBC,KAAzB,EAAgC;AAC9BX,IAAAA,QAAQ,CAACY,QAAQ,IAAI;AACnB,YAAM,CAACC,CAAD,EAAIC,CAAJ,IAASH,KAAK,CAACI,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAAf;;AAEA,YAAMC,QAAQ,GAAG,CAACL,CAAD,EAAIC,CAAJ,EAAOK,SAAP,KAAqB;AACpC;AAEA,YAAIL,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGnB,KAAd,IAAuBkB,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGpB,KAAzC,EAAgD;AAC9C0B,UAAAA,SAAS,CAACN,CAAD,CAAT,CAAaC,CAAb,IAAkB,CAACK,SAAS,CAACN,CAAD,CAAT,CAAaC,CAAb,CAAnB;AACD;AACF,OAND,CAHmB,CAWnB;AAEA;AAEA;;AACD,KAhBO,CAAR;AAiBD,GAlDgC,CAoDjC;AAEA;AAEA;;;AAEA,sBACE;AAAA,2BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GA/DQjB,K;;KAAAA,K;AAiET,eAAeA,KAAf","sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\nimport { xor } from \"lodash\";\nimport Random from './Random'\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\n const nrows = new Array(3);\n const ncols = new Array(3);\n  const chanceLightStartsOn = 0.5\n\n// function Board({ nrows, ncols, chanceLightStartsOn }) {\n\nfunction Board(nrows, ncols, chan) {\n  // const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  const [board, setBoard] = useState(createBoard());\n\n  function createBoard() {\n    let initialBoard = [];\n\n    // array-of-arrays of true/false values\n    for (let i = 0; i < nrows.length; i++) {\n      let rowVals = [];\n      for (let j = 0; j < ncols.length; j++) {\n        ncols[j] = Random();\n\n        if (ncols[j] > 0.5) {\n          rowVals.push(true);\n        } else {\n          rowVals.push(false);\n        }\n      }\n\n      initialBoard.push(rowVals);\n    }\n    console.log(initialBoard);\n    return initialBoard;\n  }\n  // function hasWon() {\n  //   // TODO: check the board in state to determine whether the player has won.\n  // }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n    });\n  }\n\n  // // if the game is won, just show a winning msg & render nothing else\n\n  // // TODO\n\n  // TODO create table board\n\n  return (\n    <div>\n      <h1>Board</h1>\n    </div>\n  );\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}